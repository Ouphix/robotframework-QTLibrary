# -*- coding: cp936 -*-
#encoding=utf-8

import datetime
from datetime import date
import re
import os
import time
import socket
import urlparse
import random
import string
import codecs
import sys
try:
    import subprocess
except ImportError:
    subprocess = None  # subprocess not available on Python/Jython < 2.5

__version__ = '0.10'


class _ElementKeywords():

    def __init__(self):
        self._counter = 0
        """self._element_finder = ElementFinder()"""
        pass
    # Public, element lookups

    def count(self):
        """Simulates moving mouse away from the element specified by `locator`.
        Key attributes for arbitrary elements are `id` and `name`. See
        `introduction` for details about locating elements.

        | test | test2 |
        Example:
        | Execute JavaScript | window.my_js_function('arg1', 'arg2') |
        | Execute JavaScript | ${CURDIR}/js_to_execute.js |
        """
        self._counter += 1
        return self._counter

    def clear_counter(self):
        """clear counter has only a short documentation"""
        self._counter = 0
    def gen_nums(self,counts):
        """Get random number string.
        Example:
        | @{a}= | gen nums | 4 |
        It will return 4 random number. like '2624','1456'.
        """

        li = string.digits
        s = ''
        for n in range(0,int(counts)) :
            s += li[random.randint(0,len(li)-1)]
        return s
    def gen_chars(self,counts,upper='M'):
        """Get random character string.
        upper=U, will get all upper chars.
        upper=L, will get all lower chars.
        upper=M, will get mixed upper and lower chars.
        Example:
        | @{a}= | gen chars | 4 | U |
        It will return 4 random number. like 'ABCS','FDWW'.
        """
        s = ''
        #print string.ascii_letters
        if upper.upper() == 'U':
            li = string.ascii_uppercase
            lenli = len(li)
            for n in range(0,int(counts)):
                s += li[random.randint(0,lenli-1)]
        elif upper.upper() == 'L':
            li = string.ascii_lowercase
            lenli = len(li)
            for n in range(0,int(counts)):
                s += li[random.randint(0,lenli-1)]
        elif upper.upper() == 'M':
            li = string.ascii_letters
            lenli = len(li)
            for n in range(0,int(counts)):
                s += li[random.randint(0,lenli-1)]
        else :
            pass
        return s
    def gen_birthday(self,maxAge=55,minAge=21,sep=''):
        """Get random birthday.
        Example:
        | @{a}= | gen birthday | 4 | 0 | - |
        It will return random age in 0-4 years old birthday.
        like '20100302','20120123'.
        If sep is not null, such as '-', it will return '2010-03-02'
        """
        now = date.today()
        #print now
        birth = now.year - int(minAge)
        #print birth
        mon      = ['1','2','3','4','5','6','7','8','9','10','11','12']
        mon_days = ['31','28','31','30','31','30','31','31','30','31','30','31']
        s =''
        age = int(maxAge)-int(minAge)
        #print 'age'+str(age)
        y = str(birth - random.randint(1,age))
        #print 'y'+str(y)
        index1 = random.randint(0,11)
        #print 'index1:'+str(index1)
        m = str(mon[index1])
        m = m.zfill(2)
        maxDay = int(mon_days[index1])
        d = str(random.randint(1,maxDay))
        d = d.zfill(2)
        s = y + sep + m + sep + d
        return s
    def gen_idcard(self,idcard='',maxAge=55,minAge=21):
        """Get idcard No.
        Example:
        | @{a}= | gen idcard | 123 |
        It will return random idcard.
        like '111110198101010231','111110198402010231'.
        If the lenth of idcard in (15,17,18),
            it will return 18-idcard No
        Else
            it will return random 18-idcard No (21<age<55)
        """
        idlen=len(idcard)
        ic=str(idcard)
        if idlen==17 :
            pass
        elif idlen==15 :
            ic=ic[0:6]+'19'+ic[6:15]
        elif idlen==18 :
            pass
        else :
            ic=self.gen_nums(6)+self.gen_birthday(int(maxAge),int(minAge),'')+self.gen_nums(3)
            #print ic
        ic = ic[0:17]
        lid = list(ic)
        temp = 0
        for nn in range(2,19):
            #print 'nn:'+str(nn)
            a=int(lid[18-nn])
            w= (2**(nn-1)) % 11
            #print 'w:'+str(w)
            temp+=a*w
            #print temp
        temp = (12-temp % 11) % 11 
        if temp >=0 and temp <=9 :
            ic+=str(temp)
        elif temp ==10 :
            ic+='X'
        return ic

    #¶¨ÒåÑéÖ¤º¯Êý
    def verify_idcard(self,idcard):
        """verify 18-idcard.
        Example:
        | @{a}= | verify birthday | 111110198101010231 |
        It will return true or false for the idcard.
        """
        #print idcard
        #È¨ÖØÊý×é
        iW = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1];
        #Éí·ÝÖ¤ºÅÂëÖÐ¿ÉÄÜµÄ×Ö·û
        values = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'x']
        #Ê¹ÓÃÕýÔò±í´ïÊ½¼ì²â
        icre = re.compile('^[1-9][0-9]{16}[x0-9]$', re.IGNORECASE);
        m = icre.match(idcard);
        if m:
            pass; 
        else:
            #²»ÊÇºÏ·¨µÄÉí·ÝÖ¤ºÅÂë£¬Ö±½ÓÍË³ö
            return unicode('²»ÊÇºÏ·¨µÄÉí·ÝÖ¤ºÅÂë','gbk');
 
        S = 0;
        for i in range(0,17):
            S += int(idcard[i]) * iW[i];
 
        chk_val = (12 - (S % 11)) % 11;
        return idcard[17].lower() == values[chk_val];

    def _lapd_str(self,strings,lens,char):
        tlen=len(strings)
        s = ''
        if tlen<lens :
            for n in range(1,lens-tlen):
                s+=char
            s+=strings
        else :
            s=strings
        return s

    def _Unicode(self):
        val = random.randint(0x4E00, 0x9FBF)
        return unichr(val)

    def gen_name(self,num=3):
        """gen_name gen chinese name.
        Example:
        | @{a}= | gen name | 3 |
        It will return chinese name.
        """        
        #ÐÕÊÏÁÐ±í
        li_name =[u'ÕÔ',u'Ç®',u'Ëï',u'Àî',u'ÖÜ',u'Îâ',u'Ö£',u'Íõ',u'·ë',u'³Â',u'ñÒ',u'½¯',
									u'Éò',u'º«',u'Ñî',u'ÓÈ',u'Ðí',u'ºÎ',u'ÂÀ',u'Ê©',u'ÕÅ',u'¿×',u'²Ü',u'ÑÏ',
									u'Öì',u'ÇØ',u'»ª',u'½ð',u'Îº',u'ÌÕ',u'½ª',u'ÆÝ',u'Ð»',u'×Þ',u'Ó÷',u'°Ø',
									u'Ë®',u'ñ¼',u'ÕÂ',u'ÔÆ',u'ËÕ',u'ÅË',u'¸ð',u'ÞÉ',u'·¶',u'Åí',u'ÀÉ',u'Â³',
									u'Î¤',u'²ý',u'Âí',u'Ãç',u'·ï',u'»¨',u'·½',u'Óá',u'ÈÎ',u'Ô¬',u'Áø',u'Ûº',
									u'±«',u'Ê·',u'ÌÆ',u'·Ñ',u'Á®',u'á¯',u'Ñ¦',u'À×',u'ºØ',u'Äß',u'ÌÀ',u'ëø',
									u'Òó',u'ÂÞ',u'±Ï',u'ºÂ',u'Úù',u'°²',u'³£',u'ÀÖ',u'ÓÚ',u'Ê±',u'¸µ',u'Æ¤',
									u'±å',u'Æë',u'¿µ',u'Îé',u'Óà',u'Ôª',u'²·',u'¹Ë',u'ÃÏ',u'Æ½',u'»Æ',u'ºÍ',
									u'ÄÂ',u'Ïô',u'Òü',u'Ò¦',u'ÉÛ',u'¿°',u'Íô',u'Æî',u'Ã«',u'Óí',u'µÒ',u'Ã×',
									u'±´',u'Ã÷',u'ê°',u'¼Æ',u'·ü',u'³É',u'´÷',u'Ì¸',u'ËÎ',u'Ã©',u'ÅÓ',u'ÐÜ',
									u'¼Í',u'Êæ',u'Çü',u'Ïî',u'×£',u'¶­',u'Áº',u'¶Å',u'Èî',u'À¶',u'ãÉ',u'Ï¯',
									u'¼¾',u'Âé',u'Ç¿',u'¼Ö',u'Â·',u'Â¦',u'Î£',u'½­',u'Í¯',u'ÑÕ',u'¹ù',u'Ã·',
									u'Ê¢',u'ÁÖ',u'µó',u'ÖÓ',u'Ðì',u'Çñ',u'Âæ',u'¸ß',u'ÏÄ',u'²Ì',u'Ìï',u'·®',
									u'ºú',u'Áè',u'»ô',u'ÓÝ',u'Íò',u'Ö§',u'¿Â',u'¾Ì',u'¹Ü',u'Â¬',u'Äª',u'¾­',
									u'·¿',u'ôÃ',u'çÑ',u'¸É',u'½â',u'Ó¦',u'×Ú',u'¶¡',u'Ðû',u'êÚ',u'µË',u'Óô',
									u'µ¥',u'º¼',u'ºé',u'°ü',u'Öî',u'×ó',u'Ê¯',u'´Þ',u'¼ª',u'Å¥',u'¹¨',u'»Ý',
									u'³Ì',u'ïú',u'ÐÏ',u'»¬',u'Åá',u'Â½',u'ÈÙ',u'ÎÌ',u'Ü÷',u'Ñò',u'ì¶',u'Õç',
									u'Îº',u'¼Ò',u'·â',u'ÜÇ',u'ôà',u'´¢',u'½ù',u'¼³',u'Úû',u'ÃÓ',u'ËÉ',u'¾®',
									u'¶Î',u'¸»',u'Î×',u'ÎÚ',u'½¹',u'°Í',u'¹­',u'ÄÁ',u'Úó',u'É½',u'¹È',u'³µ',
									u'ºî',u'åµ',u'Åî',u'È«',u'Û­',u'°à',u'Ñö',u'Çï',u'ÖÙ',u'ÒÁ',u'¹¬',u'Äþ',
									u'³ð',u'èï',u'±©',u'¸Ê',u'î×',u'À÷',u'ÈÖ',u'×æ',u'Îä',u'·û',u'Áõ',u'¾°',
									u'Õ²',u'Êø',u'Áú',u'ÎÀ',u'Ò¶',u'ÐÒ',u'Ë¾',u'ÉØ',u'Û¬',u'Àè',u'¼»',u'±¡',
									u'Ó¡',u'ËÞ',u'°×',u'»³',u'ÆÑ',u'Ì¨',u'´Ó',u'¶õ',u'Ë÷',u'ÏÌ',u'¼®',u'Àµ',
									u'×¿',u'Ýþ',u'ÍÀ',u'ÃÉ',u'³Ø',u'ÇÇ',u'Òõ',u'Óô',u'ñã',u'ÄÜ',u'²Ô',u'Ë«',
									u'ÎÅ',u'Ý·',u'µ³',u'µÔ',u'Ì·',u'¹±',u'ÀÍ',u'åÌ',u'¼§',u'Éê',u'·ö',u'¶Â',
									u'È½',u'Ô×',u'Ûª',u'Óº',u'È´',u'è³',u'É£',u'¹ð',u'å§',u'Å£',u'ÊÙ',u'Í¨',
									u'±ß',u'ìè',u'Ñà',u'¼½',u'Û£',u'ÆÖ',u'ÉÐ',u'Å©',u'ÎÂ',u'±ð',u'×¯',u'êÌ',
									u'²ñ',u'öÄ',u'ÑÖ',u'³ä',u'Ä½',u'Á¬',u'Èã',u'Ï°',u'»Â',u'°¬',u'Óã',u'ÈÝ',
									u'Ïò',u'¹Å',u'Ò×',u'É÷',u'¸ê',u'ÁÎ',u'¸ý',u'ÖÕ',u'ôß',u'¾Ó',u'ºâ',u'²½',
									u'¶¼',u'¹¢',u'Âú',u'ºë',u'¿ï',u'¹ú',u'ÎÄ',u'¿Ü',u'¹ã',u'Â»',u'ãÚ',u'¶«',
									u'Å¹',u'ì¯',u'ÎÖ',u'Àû',u'Îµ',u'Ô½',u'Ùç',u'Â¡',u'Àä',u'ö¤',u'ÐÁ',u'ãÛ',
									u'Ê¦',u'¹®',u'ØÇ',u'Äô',u'êË',u'¹´',u'°½',u'ÈÚ',u'ÄÇ',u'¼ò',u'ÈÄ',u'¿Õ',
									u'Ôø',u'Îã',u'É³',u'Ø¿',u'Ñø',u'¾Ï',u'Ðë',u'·á',u'³²',u'¹Ø',u'Øá',u'Ïà',
									u'²é',u'ºó',u'¾£',u'ºì',u'ÓÎ',u'óÃ',u'È¨',u'åÖ',u'¸Ç',u'áá',u'»¸',u'¹«',
									u'Íò',u'Ù¹',u'Ë¾Âí',u'ÉÏ¹Ù',u'Å·Ñô',u'ÏÄºî',u'Öî¸ð',u'ÎÅÈË',u'¶«·½',u'ºÕÁ¬',u'»Ê¸¦',u'Î¾³Ù',
									u'¹«Ñò',u'å£Ì¨',u'¹«',u'Ò±',u'×Ú',u'Õþ',u'å§',u'Ñô',u'´¾ÓÚ',u'µ¥ÓÚ',u'Ì«Êå',u'Éê',
									u'ÍÀ',u'¹«Ëï',u'ÖÙËï',u'ÐùÔ¯',u'Áîºü',u'ÖÓÀë',u'ÓîÎÄ',u'³¤Ëï',u'Ä½ÈÝ',u'ÏÊÓÚ',u'ãÌÇð',u'Ë¾Í½',
									u'Ë¾¿Õ',u'ØÁ¹Ù',u'Ë¾¿Ü',u'Øë¶½',u'×Ó³µ',u'ò§Ëï',u'¶ËÄ¾',u'Î×',u'Âí',u'¹«Î÷',u'Æáµñ',u'ÀÖÕý',
									u'ÈÀæá',u'¹«Á¼',u'ÍØ¼Ð',u'¹ÈÔ×',u'¸¸¹È',u'Á»',u'½ú',u'³þ',u'ãÆ',u'·¨',u'Èê',
									u'Û³',u'Í¿',u'ÇÕ',u'¶Î',u'¸É',u'°ÙÀï',u'¶«¹ù',u'ÄÏÃÅ',u'ºôÑÓ',u'¹éº£',u'ÑòÉà',u'Î¢Éú',
									u'ÔÀ',u'Ë§',u'çÃ¿º',u'¿ö',u'ºó',u'ÓÐÇÙ',u'Áº',u'Çð',u'×óÇð',u'¶«ÃÅ',u'Î÷ÃÅ',u'ÉÌ',
									u'Ä²',u'ÙÜ',u'Ù¦²®',u'ÉÍ',u'ÄÏ¹¬',u'Ä«¹þ',u'ÚÛóÎ',u'Äê',u'°®',u'Ñô',u'Ù¡']
        ln = len(li_name)
        last_name= li_name[random.randint(0,ln-1)]
        #print last_name
        first_name =''
        for n in range(0,int(num)-len(last_name)):
            first_name += self._GB2312()
            #print first_name
        return last_name + first_name

    #@Ëæ»úÉú³Éºº×Ö
    def _GB2312(self):
        
        str1 = self._hex()
        #print 'str1:'+str1
        #print str1.decode('hex')
        try :
            str2 =str1.decode('hex').decode('gb2312')
        except UnicodeDecodeError:
            #³öÏÖ´íÎóµÄÊ±ºòÖØÐÂÉú³ÉÒ»¸öºº×Ö
            str1 = self._hex()
            try :
                str2 =str1.decode('hex').decode('gb2312')
                #print '22222' + str2
            except UnicodeDecodeError:
                #ÍòÒ»RPºÜ²î»¹ÊÇ±¨´í£¬ÄÇ¾ÍÖ¸¶¨Ò»¸öºº×ÖËãÁË
                str2 = u'°²'
        return str2
    
    def _hex(self):
        head = random.randint(0xB0, 0xCF)
        body = random.randint(0xA, 0xF)
        if body == 0xF :
            tail = random.randint(0, 0xE)
        else :
            tail = random.randint(0, 0xF)
        val = ( head << 8 ) | (body << 4) | tail
        str1 = "%x" % val
        return str1
    
    def create_pboc(self, new_name,new_id,filepath):
        """Create Pboc
        You can create a normal credit file by using this keyword.
        Example:
        Create Pboc| Pingan | 252461196308226269|${CURDIR}
        It will create a credit file in the directory and return the file path
        Then you can upload the file.
        Remember that ${CURDIR} is necessary!! :b
        """

        path_sep=os.sep
        credit_file=filepath+path_sep+'credit.html'
        #print credit_file
        lines = open(credit_file, "rb").readlines()
        tmp=lines[0].strip()
        cust_name = re.compile('id="custName" type="hidden" value="(.*?)"/>').findall(tmp)[0]
        #print cust_name
        tmp=lines[1].strip()
        cust_id = re.compile('id="custId" type="hidden" value="(.*?)"/>').findall(tmp)[0]
        #print cust_id
        tmp=lines[2].strip()
        credit_id = re.compile('id="credit_id" type="hidden" value="(.*?)"/>').findall(tmp)[0]
        #print credit_id
        new_creditid=datetime.datetime.now().strftime('%Y%m%d%H%M%S')
        new_creditid+=str(datetime.datetime.now().microsecond)
        new_creditid+=str(random.randint(10,99))
        #Get Customer Name And ID in the Credit File
        new_id=new_id.encode("GBK")
        new_name=new_name.encode("GBK")
        #Convert it into GBK code
        streamWriter = codecs.lookup('utf-8')[-1]
        sys.stdout=open(credit_file,"r")
        sys.stdout = streamWriter(sys.stdout)
        content=sys.stdout.read().replace(cust_name,new_name).replace(cust_id,new_id).replace(credit_id,new_creditid)
        f = open(credit_file,'w')
        f.write(content)
        #Replace the Name and ID 
        f.close()
        sys.stdout.close()
        return credit_file

if __name__ == "__main__":
    #ÕâÊÇÒ»¸ö²âÊÔÓÃµÄ½Å±¾£¬¿ÉÒÔÖ±½ÓÔËÐÐ¸ÃÎÄ¼þÑéÖ¤ÐÂÔöµÄº¯Êý
    #Õâ²¿·ÖµÄ´úÂëÑÏ½ûÉ¾³ý
    #u=_ElementKeywords().Unicode()
    #print u
    #x=_ElementKeywords()._GB2312()
    #print x
    for n in range(0,100):
        na=_ElementKeywords().gen_name(4)
        print na
    """a=_ElementKeywords().gen_birthday('23','21','-')
    print 'a:'+a
    b=_ElementKeywords().gen_idcard('')
    print 'b:'+b
    c=_ElementKeywords().verify_idcard(b)
    print 'c:'+str(c)
    d=_ElementKeywords().gen_nums(5)
    print 'd:'+d
    e=_ElementKeywords().gen_chars(6)
    print 'e:'+e"""



